version: '3.8'

services:
  # Next.js Frontend
  frontend:
    build:
      context: ./frontend-nextjs
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:7071/api
    volumes:
      - ./frontend-nextjs:/app
      - /app/node_modules
      - /app/.next
    networks:
      - climatize-network
    depends_on:
      - backend

  # Azure Functions Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "7071:7071"
    environment:
      # Azure Functions
      - AzureWebJobsStorage=UseDevelopmentStorage=true
      - FUNCTIONS_WORKER_RUNTIME=python
      - AZURE_FUNCTIONS_ENVIRONMENT=Development
      
      # Application Configuration
      - USE_MOCK_HELIOSCOPE=true
      - LOG_LEVEL=INFO
      
      # OpenAI Configuration (optional for local dev)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      
      # Database Configuration
      - AZURE_COSMOSDB_CONNECTION_STRING=${AZURE_COSMOSDB_CONNECTION_STRING:-}
      - AZURE_STORAGE_CONNECTION_STRING=DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://azurite:10000/devstoreaccount1;QueueEndpoint=http://azurite:10001/devstoreaccount1;TableEndpoint=http://azurite:10002/devstoreaccount1;
      
      # Redis Configuration  
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/home/site/wwwroot
      - ./shared:/home/site/wwwroot/shared
    networks:
      - climatize-network
    depends_on:
      - azurite
      - redis

  # Azure Storage Emulator (Azurite)
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    ports:
      - "10000:10000"  # Blob service
      - "10001:10001"  # Queue service 
      - "10002:10002"  # Table service
    environment:
      - AZURITE_ACCOUNTS=devstoreaccount1:Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==
    volumes:
      - azurite-data:/workspace
    networks:
      - climatize-network

  # Redis for agent coordination and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - climatize-network
    command: redis-server --appendonly yes

  # CosmosDB Emulator (optional - can use external CosmosDB)
  cosmosdb:
    image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
    ports:
      - "8081:8081"
      - "10251:10251"
      - "10252:10252"
      - "10253:10253"
      - "10254:10254"
    environment:
      - AZURE_COSMOS_EMULATOR_PARTITION_COUNT=10
      - AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE=true
      - AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE=0.0.0.0
    volumes:
      - cosmosdb-data:/tmp/cosmos/appdata
    networks:
      - climatize-network

  # Nginx reverse proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - climatize-network
    depends_on:
      - frontend
      - backend

volumes:
  azurite-data:
    driver: local
  redis-data:
    driver: local
  cosmosdb-data:
    driver: local

networks:
  climatize-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 